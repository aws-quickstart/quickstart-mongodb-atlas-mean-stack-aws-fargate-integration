---
AWSTemplateFormatVersion: "2010-09-09"
Description: MongoDB Atlas AWS CloudFormation Quickstart. (qs-1rkorhec7)
Metadata:
  cfn-lint: { config: { ignore_checks: [W9002, W9003, W9006, E3001, E1010] } }
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: MongoDB Atlas ApiKey Configuration
        Parameters:
          - PublicKey
          - PrivateKey
          - OrgId
      - Label:
          default: MongoDB Atlas Configuration
        Parameters:
          - ProjectName
          - ClusterName
          - ClusterRegion
          - ClusterInstanceSize
          - DatabaseUserRoleDatabaseName
          - DatabaseUserName
          - DatabasePassword
      - Label:
          default: AWS Network Configuration
        Parameters:
          - VpcId
    ParameterLabels:
      PublicKey:
        default: MongoDB Atlas API PublicKey
      PrivateKey:
        default: MongoDB Atlas API PrivateKey
      OrgId:
        default: MongoDB Atlas API OrgId
      ProjectName:
        default: Name of new Atlas Project
      ClusterName:
        default: Name of new cluster
      ClusterRegion:
        default: The AWS Region for Atlas Cluster
      ClusterInstanceSize:
        default: MongoDB Atlas Instance Size
      DatabaseUserRoleDatabaseName:
        default: MongoDB Atlas Database User Role Database Name
      DatabaseUserName:
        default: MongoDB Atlas Database User  Name
      DatabasePassword:
        default: MongoDB Atlas Database User Password
Parameters:
  PublicKey:
    Description: "Your MongoDB Cloud Public API Key"
    Type: String
    Default: ""
  PrivateKey:
    Description: "Your MongoDB Cloud Private API Key"
    Type: String
    Default: ""
  OrgId:
    Description: "Your MongoDB Cloud Organization Id"
    Type: String
    Default: "5fe4ea50d1a2b617175ee3d4"
  ProjectName:
    Description: "The name of the project."
    Type: String
    Default: "aws-quickstart"
  ClusterName:
    Description:
      Name of the cluster as it appears in Atlas. Once the cluster is created,
      its name cannot be changed.
    Type: String
    Default: "Cluster-1"
  DatabaseUserName:
    Description: MongoDB Atlas Database User  Name.
    Type: String
    Default: "testUser"
  DatabasePassword:
    Description: MongoDB Atlas Database User Password.
    Type: String
    Default: "test123"
  VpcId:
    Description: AWS VPC network ID.
    Type: String
    Default: "vpc-07e2075326c2fe4df"
  ClusterInstanceSize:
    Default: "M10"
    Description: Atlas provides different cluster tiers, each with a default storage capacity and RAM size. The cluster you select is used for all the data-bearing hosts in your cluster tier. See https://docs.atlas.mongodb.com/reference/amazon-aws/#amazon-aws.
    Type: String
    AllowedValues:
      - "M10"
      - "M20"
      - "M30"
      - "M40"
      - "R40"
      - "M40_NVME"
      - "M50"
      - "R50"
      - "M50_NVME"
      - "M60"
      - "R60"
      - "M60_NVME"
      - "M80"
      - "R80"
      - "M80_NVME"
      - "M100"
      - "M140"
      - "M200"
      - "R200"
      - "M200_NVME"
      - "M300"
      - "R300"
      - "R400"
      - "M400_NVME"
      - "R700"
  ClusterRegion:
    Default: ap-south-1
    Description: The AWS Region where the Atlas DB Cluster will run.
    Type: String
    AllowedValues:
      - "us-east-1"
      - "us-east-2"
      - "ca-central-1"
      - "us-west-1"
      - "us-west-2"
      - "sa-east-1"
      - "ap-south-1"
      - "ap-east-2"
      - "ap-southeast-1"
      - "ap-southeast-2"
      - "ap-northeast-1"
      - "ap-northeast-2"
      - "eu-central-1"
      - "eu-west-1"
      - "eu-north-1"
      - "eu-west-1"
      - "eu-west-2"
      - "eu-west-3"
      - "eu-south-1"
      - "me-south-1"
      - "af-south-1"
  ClusterMongoDBMajorVersion:
    Description: The version of MongoDB
    Type: String
    Default: "4.4"
    AllowedValues:
      - "3.6"
      - "4.0"
      - "4.2"
      - "4.4"
  DatabaseUserRoleDatabaseName:
    Description: Database User Role Database Name
    Type: String
    Default: "test"
Mappings:
  SubnetConfig:
    VPC:
      CIDR: "10.0.0.0/16"
    PublicOne:
      CIDR: "172.30.8.0/24"
    PublicTwo:
      CIDR: "172.30.9.0/24"
Resources:
  AtlasApiKeySecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Sub "${AWS::StackName}-ApiKey-Secret"
      Description: MongoDB Atlas API Key
      #
      # { "PublicKey" : "xxx", "PrivateKey", "yyy", "OrgId": "zzz" }
      #
      SecretString:
        !Join [
          "",
          [
            '{"PublicKey":"',
            !Ref "PublicKey",
            '", "PrivateKey":"',
            !Ref "PrivateKey",
            '", "OrgId":"',
            !Ref "OrgId",
            '"}',
          ],
        ]
      Tags:
        - Key: mongodb-atlas-quickstart-stack
          Value: !Sub "${AWS::StackName}"
  AtlasIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
  AtlasProject:
    Type: MongoDB::Atlas::Project
    DependsOn: AtlasIAMRole
    Properties:
      OrgId: !Ref "OrgId"
      ApiKeys:
        PublicKey: !Ref "PublicKey"
        PrivateKey: !Ref "PrivateKey"
      Name: !Ref "ProjectName"
  AtlasProjectIPAccessList:
    Type: MongoDB::Atlas::ProjectIpAccessList
    Properties:
      ProjectId: !Ref "AtlasProject"
      ApiKeys:
        PublicKey: !Ref "PublicKey"
        PrivateKey: !Ref "PrivateKey"
      AccessList:
        - IPAddress: "0.0.0.0/1"
          Comment: "Testing open all ips"
  AtlasCluster:
    Type: MongoDB::Atlas::Clusters
    Properties:
      ApiKeys:
        PublicKey: !Ref "PublicKey"
        PrivateKey: !Ref "PrivateKey"
      ProjectId: !Ref "AtlasProject"
      Name: !Ref "ClusterName"
      MongoDBMajorVersion: !Ref "ClusterMongoDBMajorVersion"
      ClusterType: "REPLICASET"
      ReplicationSpecs:
        - NumShards: "1"
          AdvancedRegionConfigs:
            - AutoScaling:
                DiskGB:
                  Enabled: "true"
                Compute:
                  Enabled: "false"
                  ScaleDownEnabled: "false"
              ElectableSpecs:
                EbsVolumeType: STANDARD
                InstanceSize: !Ref "ClusterInstanceSize"
                NodeCount: "3"
              ReadOnlySpecs:
                EbsVolumeType: STANDARD
                InstanceSize: !Ref "ClusterInstanceSize"
                NodeCount: "1"
              Priority: "7"
              RegionName: "US_EAST_1"
  AtlasDatabaseUser:
    Type: MongoDB::Atlas::DatabaseUser
    Properties:
      ProjectId: !Ref "AtlasProject"
      ApiKeys:
        PublicKey: !Ref "PublicKey"
        PrivateKey: !Ref "PrivateKey"
      Username: !Ref "DatabaseUserName"
      Password: !Ref "DatabasePassword"
      DatabaseName: "admin"
      Roles:
        - RoleName: "atlasAdmin"
          DatabaseName: "admin"
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId: !Ref VpcId
      CidrBlock: !FindInMap ["SubnetConfig", "PublicOne", "CIDR"]
      MapPublicIpOnLaunch: true

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId: !Ref VpcId
      CidrBlock: !FindInMap ["SubnetConfig", "PublicTwo", "CIDR"]
      MapPublicIpOnLaunch: true

  ClientService:
    DependsOn:
      - ClientTCP8080Listener
    Properties:
      Cluster:
        Fn::GetAtt:
          - Cluster
          - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: client
          ContainerPort: 8080
          TargetGroupArn:
            Ref: ClientTCP8080TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Ref: DefaultNetwork
          Subnets:
            - Ref: PublicSubnetOne
            - Ref: PublicSubnetTwo
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - ClientServiceDiscoveryEntry
              - Arn
      Tags:
        - Key: com.docker.compose.project
          Value: partner-meanstack-atlas-fargate
        - Key: com.docker.compose.service
          Value: client
      TaskDefinition:
        Ref: ClientTaskDefinition
    Type: AWS::ECS::Service
  ClientServiceDiscoveryEntry:
    Properties:
      Description: '"client" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: client
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  ClientTCP8080Listener:
    Properties:
      DefaultActions:
        - ForwardConfig:
            TargetGroups:
              - TargetGroupArn:
                  Ref: ClientTCP8080TargetGroup
          Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 8080
      Protocol: TCP
    Type: AWS::ElasticLoadBalancingV2::Listener
  ClientTCP8080TargetGroup:
    Properties:
      Port: 8080
      Protocol: TCP
      Tags:
        - Key: com.docker.compose.project
          Value: partner-meanstack-atlas-fargate
      TargetType: ip
      VpcId: !Ref VpcId
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  ClientTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Command:
            - us-east-1.compute.internal
            - partner-meanstack-atlas-fargate.local
          Essential: false
          Image: docker/ecs-searchdomain-sidecar:1.0
          Environment:
            - Name: ATLAS_URI
              Value: !Join [ '-', ['http://', !GetAtt LoadBalancer.DNSName, ':', '5200'] ]
                # - ""
                # - - "http://"
                #   - !GetAtt LoadBalancer.DNSName
                #   - ":"
                #   - 5200
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: partner-meanstack-atlas-fargate
          Name: Client_ResolvConf_InitContainer
        - DependsOn:
            - Condition: SUCCESS
              ContainerName: Client_ResolvConf_InitContainer
          Essential: true
          Image: 816546967292.dkr.ecr.us-east-1.amazonaws.com/partner-meanstack-atlas-fargate-client:latest
          Environment:
            - Name: ATLAS_URI
              Value: !Join [ '-', ['http://', !GetAtt LoadBalancer.DNSName, ':', '5200'] ]
                # - ""
                # - - "http://"
                #   - !GetAtt LoadBalancer.DNSName
                #   - ":"
                #   - 5200
          LinuxParameters: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: partner-meanstack-atlas-fargate
          Name: client
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn: !GetAtt "ClientTaskExecutionRole.Arn"
      Family: partner-meanstack-atlas-fargate-client
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
    Type: AWS::ECS::TaskDefinition
  ClientTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: com.docker.compose.project
          Value: partner-meanstack-atlas-fargate
        - Key: com.docker.compose.service
          Value: client
    Type: AWS::IAM::Role
  CloudMap:
    Properties:
      Description: Service Map for Docker Compose project partner-meanstack-atlas-fargate
      Name: partner-meanstack-atlas-fargate.local
      Vpc: vpc-07e2075326c2fe4df
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
  Cluster:
    Properties:
      ClusterName: partner-meanstack-atlas-fargate
      Tags:
        - Key: com.docker.compose.project
          Value: partner-meanstack-atlas-fargate
    Type: AWS::ECS::Cluster
  Default5200Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: server:5200/tcp on default network
      FromPort: 5200
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: TCP
      ToPort: 5200
    Type: AWS::EC2::SecurityGroupIngress
  Default8080Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: client:8080/tcp on default network
      FromPort: 8080
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: TCP
      ToPort: 8080
    Type: AWS::EC2::SecurityGroupIngress
  DefaultNetwork:
    Properties:
      GroupDescription:
        partner-meanstack-atlas-fargate Security Group for default
        network
      Tags:
        - Key: com.docker.compose.project
          Value: partner-meanstack-atlas-fargate
        - Key: com.docker.compose.network
          Value: partner-meanstack-atlas-fargate_default
      VpcId: !Ref VpcId
    Type: AWS::EC2::SecurityGroup
  DefaultNetworkIngress:
    Properties:
      Description: Allow communication within network default
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: DefaultNetwork
    Type: AWS::EC2::SecurityGroupIngress
  LoadBalancer:
    Properties:
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: "true"
      Scheme: internet-facing
      Name: "demoapp"
      Subnets:
        - Ref: PublicSubnetOne
        - Ref: PublicSubnetTwo
      Tags:
        - Key: com.docker.compose.project
          Value: partner-meanstack-atlas-fargate
      Type: network
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  LogGroup:
    Properties:
      LogGroupName: /docker-compose/partner-meanstack-atlas-fargate
    Type: AWS::Logs::LogGroup
  ServerService:
    DependsOn:
      - ServerTCP5200Listener
    Properties:
      Cluster:
        Fn::GetAtt:
          - Cluster
          - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: server
          ContainerPort: 5200
          TargetGroupArn:
            Ref: ServerTCP5200TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Ref: DefaultNetwork
          Subnets:
            - Ref: PublicSubnetOne
            - Ref: PublicSubnetTwo
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - ServerServiceDiscoveryEntry
              - Arn
      Tags:
        - Key: com.docker.compose.project
          Value: partner-meanstack-atlas-fargate
        - Key: com.docker.compose.service
          Value: server
      TaskDefinition:
        Ref: ServerTaskDefinition
    Type: AWS::ECS::Service
  ServerServiceDiscoveryEntry:
    Properties:
      Description: '"server" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: server
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  ServerTCP5200Listener:
    Properties:
      DefaultActions:
        - ForwardConfig:
            TargetGroups:
              - TargetGroupArn:
                  Ref: ServerTCP5200TargetGroup
          Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 5200
      Protocol: TCP
    Type: AWS::ElasticLoadBalancingV2::Listener
  ServerTCP5200TargetGroup:
    Properties:
      Port: 5200
      Protocol: TCP
      Tags:
        - Key: com.docker.compose.project
          Value: partner-meanstack-atlas-fargate
      TargetType: ip
      VpcId: !Ref VpcId
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  ServerTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Command:
            - us-east-1.compute.internal
            - partner-meanstack-atlas-fargate.local
          Essential: false
          Image: docker/ecs-searchdomain-sidecar:1.0
          Environment:
            - Name: ATLAS_URI
              Value: !GetAtt "AtlasCluster.ConnectionStrings.StandardSrv"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: partner-meanstack-atlas-fargate
          Name: Server_ResolvConf_InitContainer
        - DependsOn:
            - Condition: SUCCESS
              ContainerName: Server_ResolvConf_InitContainer
          Essential: true
          Image: 816546967292.dkr.ecr.us-east-1.amazonaws.com/partner-meanstack-atlas-fargate-server:latest
          Environment:
            - Name: ATLAS_URI
              Value: !Join
                - ""
                - - "mongodb+srv://"
                  - !Ref "DatabaseUserName"
                  - ":"
                  - !Ref "DatabasePassword"
                  - "@"
                  - !Select [
                      1,
                      !Split [
                        "//",
                        !GetAtt "AtlasCluster.ConnectionStrings.StandardSrv",
                      ],
                    ]
          LinuxParameters: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: partner-meanstack-atlas-fargate
          Name: server
          PortMappings:
            - ContainerPort: 5200
              HostPort: 5200
              Protocol: tcp
      Cpu: "256"
      TaskRoleArn: !GetAtt "AtlasIAMRole.Arn"
      ExecutionRoleArn: !GetAtt "AtlasIAMRole.Arn"
      Family: partner-meanstack-atlas-fargate-server
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
    Type: AWS::ECS::TaskDefinition
  ServerTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: com.docker.compose.project
          Value: partner-meanstack-atlas-fargate
        - Key: com.docker.compose.service
          Value: server
    Type: AWS::IAM::Role

Outputs:
  AtlasIAMRole:
    Description: "ARN for AWS IAM Role database cluster access"
    Value: !GetAtt "AtlasIAMRole.Arn"
    Export:
      Name: !Join ["-", [!Ref "AWS::StackName", "AtlasIAMRoleARN"]]
  AtlasDatabaseUser:
    Description: "Atlas database user, configured for AWS IAM Role access."
    Value: !Ref AtlasDatabaseUser
    Export:
      Name: !Join ["-", [!Ref "AWS::StackName", "AtlasDatabaseUser"]]
  AtlasProject:
    Description: "Info on your Atlas deployment"
    Value: !Ref AtlasProject
    Export:
      Name: !Join ["-", [!Ref "AWS::StackName", "AtlasProjectId"]]
  AtlasProjectIPAccessList:
    Description: "Atlas project ip access list"
    Value: !Ref AtlasProjectIPAccessList
    Export:
      Name: !Join ["-", [!Ref "AWS::StackName", "AtlasProjectIPAccessList"]]
  AtlasCluster:
    Description: "Info on your Atlas Cluster"
    Value: !Ref AtlasCluster
    Export:
      Name: !Join ["-", [!Ref "AWS::StackName", "AtlasCluster"]]
  ClusterState:
    Description: "Cluster State"
    Value: !GetAtt "AtlasCluster.StateName"
    Export:
      Name: !Join ["-", [!Ref "AWS::StackName", "ClusterState"]]
  ClusterSrvAddress:
    Description: "Hostname for mongodb+srv:// connection string"
    Value: !GetAtt "AtlasCluster.ConnectionStrings.StandardSrv"
    Export:
      Name: !Join ["-", [!Ref "AWS::StackName", "ClusterSrvAddress"]]
